# Kong Admin API provides a RESTful interface for administration and configuration of Gateway entities such as services, routes, plugins, consumers, and more. All of the tasks you can perform against the Gateway can be automated using the Kong Admin API.
admin:
  enabled: true
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
  tls:
    enabled: true
    servicePort: 8444
    containerPort: 8444
  ingress:
    enabled: true
    hostname: admin.kong.6degrees.com.sa
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: http01-clusterissuer
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: kong-auth-secret
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"

    tls:
      - hosts:
          - admin.kong.6degrees.com.sa
        secretName: kong-admin-tls
    path: /
    pathType: ImplementationSpecific

# Kong Manager is the graphical user interface (GUI) for Kong Gateway. It uses the Kong Admin API under the hood to administer and control Kong Gateway.
manager:
  enabled: true
  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
  tls:
    enabled: true
    servicePort: 8445
    containerPort: 8445
  ingress:
    enabled: true
    hostname: manager.kong.6degrees.com.sa
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: http01-clusterissuer
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: kong-auth-secret
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"

    tls:
      - hosts:
          - manager.kong.6degrees.com.sa
        secretName: kong-manager-tls
    path: /
    pathType: ImplementationSpecific


portal:
  enabled: true
  http:
    enabled: true
  tls:
    enabled: true
  ingress:
    enabled: true
    hostname: portal.kong.6degrees.com.sa
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: http01-clusterissuer
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tls:
      - hosts:
          - portal.kong.6degrees.com.sa
        secretName: kong-portal-tls


portalapi:
  enabled: true
  http:
    enabled: true
  tls:
    enabled: true
  ingress:
    enabled: true
    hostname: portalapi.kong.6degrees.com.sa
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: http01-clusterissuer
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tls:
      - hosts:
          - portalapi.kong.6degrees.com.sa
        secretName: kong-portalapi-tls


proxy:
  enabled: true
  type: ClusterIP
  http:
    enabled: true
    servicePort: 8000
    containerPort: 8000
  tls:
    enabled: true
    servicePort: 8443
    containerPort: 8443
  ingress:
    enabled: true
    hostname: api.kong.6degrees.com.sa
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: http01-clusterissuer
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    tls:
      - hosts:
          - api.kong.6degrees.com.sa
        secretName: kong-proxy-tls
    path: /
    pathType: ImplementationSpecific

env:
  database: postgres

postgresql:
  enabled: false

envFrom:
  - secretRef:
      name: kong-db-secret

enterprise:
  enabled: true
  license_secret: kong-enterprise-license

ingressController:
  enabled: true